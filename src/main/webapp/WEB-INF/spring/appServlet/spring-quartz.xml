<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
		
	<bean id="executeUsingQuartz" class="com.rainbow.um.common.ExecuteUsingQuartz"/>
	<!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
	<!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
	<!-- 동시 실행을 방지합니다. -->
	<bean id="jobFactoryBean" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
		p:targetObject-ref="executeUsingQuartz" p:targetMethod="sendMessage" p:concurrent="false"/>
	<!-- CronTrigger 실행 주기 설정 -->
	<bean id="triggerFactoryBean" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
		p:jobDetail-ref="jobFactoryBean" p:cronExpression="50 * * * * ?"/>
	<!-- 설정한 CronTrigger 실행-->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		p:triggers-ref="triggerFactoryBean" />
		
</beans>
